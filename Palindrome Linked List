Given the head of a singly linked list, return true if it is a palindrome or false otherwise.
Example 1:
Input: head = [1,2,2,1]
Output: true

Example 2:
Input: head = [1,2]
Output: false

Constraints:
The number of nodes in the list is in the range [1, 105].
0 <= Node.val <= 9. Follow up: Could you do it in O(n) time and O(1) space?
**************************************************************************************************

class Solution {
public:
    bool isPalindrome(ListNode* head) {
    ListNode* slow = head;
    stack<int> s;
    while (slow != NULL) {
        s.push(slow->val);
        slow = slow->next;
    }
    while (head != NULL) {
        int i = s.top();
        s.pop();
        if (head->val != i) {
            return false;
        }
        head = head->next;
    }
 
    return true;
    }
};
